\documentclass[a4paper]{article}
\begin{document}
  
\title{WCGNA on Mouse E13.5 MGE expression data}
\author{Matthew Burney, Caroline Johnston}

\maketitle


Bioconductor beadarray and genefilter libraries for dealing with the Illumina BeadArray data, annotation data and biomaRt library for fetching gene annotations and the WGCNA package from Steve Horvath (http://www.genetics.ucla.edu/labs/horvath/CoexpressionNetwork/Rpackages/WGCNA/)

<<>>=
library(beadarray)
library(genefilter)
library(WGCNA)
library(illuminaMousev2BeadID.db)
library(biomaRt)

options(stringsAsFactors = FALSE);
@

Load data. We are using the dataset without array G because it looked totally unlike the other arrays in QC plots and had suspected problems from lab QC too.

<<>>=
BSData <- get(load("BSData.noG.quantile.RData"))
E <- exprs(BSData)
summary(E)
@ 

Filter the data to remove genes that are not expressed or invariant. These contain no useful information and will just confuse the clustering. 
Define not-expressed as anything that is not expressed at anything above the 40th percentile in any of the samples 

<<>>=

#remove stuff that isn't expressed in any sample
q <-  quantile(E,0.75)
xpd <- genefilter(E, filterfun( kOverA(1, A=q, na.rm=TRUE)))
sum(xpd)
E <- E[xpd,]

#and remove anything remaining that is invariant
varying <- genefilter(E,filterfun(function(x){sd(x)>= 0.2}))
sum(varying)
E <- E[varying,]

dim(E) 

@

WGCNA expects samples as rows, genes as cols:

<<>>=
E <- t(E) 
@ 

Choosing the $\beta$ soft-threshold for the construction of the weighted gene network is done on the basis of the scale-free-topology-ness of the resulting network. They provide a function to try out a range of values.

<<>>=
powers <- c(c(1:10), seq(from = 12, to=30, by=2))
sft <- pickSoftThreshold(E, powerVector = powers, verbose = 5)
@ 

Plot the results

<<>>=
sizeGrWindow(9, 5)
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
@

Slightly concerned that our data just is not a scale-free network. By the time we get even fairly high levels of scale independence, we have got almost no connectivity. 
Including more data does not seem to help much.  Maybe we just do not have enough variation? Or are we supposed to keep all the data in and cluster everything? 
Still, will have a go at calculating the adjacencies with power 20

<<>>=
softPower = 20;
adjacency = adjacency(E, power = softPower);
@ 

Calculate the TOM from the adjacency and the dist for the clustering from that:

<<>>=
TOM = TOMsimilarity(adjacency);
dissTOM = 1-TOM

@ 

And do the clustering with their fast hclust variant

<<fig=T>>=

# Call the hierarchical clustering function
geneTree = flashClust(as.dist(dissTOM), method = "average");
# Plot the resulting clustering tree (dendrogram)
sizeGrWindow(12,9)
plot(geneTree, xlab="", sub="", main = "Gene clustering on TOM-based dissimilarity",
labels = FALSE, hang = 0.04);

@ 

Define some modules using dynamic tree cut

<<>>=
minModuleSize = 20;
dynamicMods = cutreeDynamic(dendro = geneTree, distM = dissTOM, deepSplit = 2, pamRespectsDendro = FALSE, minClusterSize = minModuleSize);
table(dynamicMods)

@ 

Give clusters colour names instead of numbers:

<<>>=

# Convert numeric lables into colors
dynamicColors = labels2colors(dynamicMods)
table(dynamicColors)

@ 

And plot the dendrogram with the colours underneath

<<fig=T>>=

sizeGrWindow(8,6)
plotDendroAndColors(geneTree, dynamicColors, "Dynamic Tree Cut",
                    dendroLabels = FALSE, hang = 0.03,
                    addGuide = TRUE, guideHang = 0.05,
                    main = "Gene dendrogram and module colors")

@ 

Calculate eigengenes and cluster them

<<>>=
MEList = moduleEigengenes(E, colors = dynamicColors)
MEs = MEList$eigengenes
MEDiss = 1-cor(MEs);
METree = flashClust(as.dist(MEDiss), method = "average");
@ 

Plot the result


<<fig=T>>=
sizeGrWindow(7, 6)
plot(METree, main = "Clustering of module eigengenes", xlab = "", sub = "")
MEDissThres = 0.18
abline(h=MEDissThres, col = "red")

@ 

Merge similar clusters on the basis of their eigengene similariy

<<>>=
merge = mergeCloseModules(E, dynamicColors, cutHeight = MEDissThres, verbose = 3)
mergedColors = merge$colors;
mergedMEs = merge$newMEs;
@ 

Compare the new, merged, modules with the old ones

<<fig=T>>=
sizeGrWindow(12, 9)
plotDendroAndColors(geneTree, cbind(dynamicColors, mergedColors),
c("Dynamic Tree Cut", "Merged dynamic"),
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)

@ 

Save the merged clusters
<<>>=
moduleColors = mergedColors
colorOrder = c("grey", standardColors());
moduleLabels = match(moduleColors, colorOrder)-1;
names(moduleColors) <- names(moduleLabels) <- colnames(E)
MEs = mergedMEs;
# Save module data
save(MEs, moduleLabels, moduleColors, geneTree, file = "WCGNA_part1.RData")

@ 

Fetch the Ensembl IDs and Gene Symbol from the Bioconductor Annotation

<<>>=

ids = rownames(exprs(BSData))
symbol <- mget(ids, illuminaMousev2BeadIDSYMBOL, ifnotfound = NA)
#just check they only have one each
sum(sapply(symbol, length) > 1)
symbol <- as.character(symbol)
length(which(symbol=="NA"))

@ 

Also get Ensembl ID from BioC annotation so we can map through biomaRt to any other annotation we require:

<<>>=

ensembl = mget(ids, illuminaMousev2BeadIDENSEMBL, ifnotfound = NA)
length(which(is.na(ensembl)))

@ 

Some ensembl genes which have multiple probes hitting them. For the moment, I am just looking at them seperately.
There are also a few probes which cross-hybridise to multiple ensembl transcripts. I have thrown their annotation away for now.

<<>>=
sum(sapply(ensembl, length) > 1)
crosshyb <- which(( sapply(ensembl, length) ) > 1) 
length(crosshyb)
ensembl[crosshyb] <- NA 
ensembl <- as.character(ensembl)
ensembl[ensembl=="NA"] = NA
length(which(is.na(ensembl)))

@ 

Fetch other annotation from biomaRt

<<>>=

ensmart <- useMart("ensembl", dataset="mmusculus_gene_ensembl")

filters <- "ensembl_gene_id"
values <- ensembl[!is.na(ensembl)]
attributes <- c("ensembl_gene_id", "chromosome_name","start_position", "end_position", "strand", "description")
ens.anno <- getBM(filters=filters, values=values, attributes=attributes, mart=ensmart)
rownames(ens.anno)<-ens.anno[,1]

anno <- data.frame(
                   ID = as.character(ids),
                   EnsemblID = ensembl,
                   symbol=symbol,
                   ens.anno[ensembl,],
                   stringsAsFactors=F
              )
rownames(anno) <- anno[,"ID"]


@ 

Make a dataframe of genes, their module memberships and their annotation 

<<>>=

#Pearson cor of genes with eigengenes as module membership 
geneModuleMembership = as.data.frame(cor(E, MEs, use = "p"));
#and associated p.value of that correlation. 
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nrow(E)));
colnames(MMPvalue) <- paste(colnames(MMPvalue), '.p', sep="")

geneids <- rownames(geneModuleMembership)
results <- cbind(anno[geneids,],ModuleNumber=moduleLabels[geneids], ModuleName=moduleColors[geneids], geneModuleMembership, MMPvalue[geneids,])

write.csv(results, file="results.csv", row.names=F)

@ 

Have a quick look at what the modules look like and output a file for each of their contents

<<results=tex,echo=FALSE>>=  


for(i in unique(moduleLabels)){
  
  these <- moduleLabels==i
  nm <- unique(moduleColors[these])
  choose.cols <- c("ID","EnsemblID","symbol","chromosome_name","start_position","end_position", "strand", "description", paste("ME",nm, sep=""), paste("ME",nm,".p",sep=""))
  this.data <- results[these,choose.cols]
  write.csv(this.data, paste("modules/", "module_",i,"_",nm,".csv",sep=""))
   
  this.xpn <- t(E[,this.data[,"ID"]])
  
  file=paste("modules/","module_",i,"_",nm , ".eps", sep="")
  
  postscript(file=file, paper="special", width=6, height=6)  
  plot(this.xpn[1,], ylim=range(this.xpn), xlab="Sample", ylab="relative log2 intensity", type="l")
  for(j in 2:nrow(this.xpn)){
    lines(this.xpn[j,],col=j, type="l")
  }
  dev.off()  
  cat("\\includegraphics{", file, "}\n\n", sep="")  
}  
    
@


\end{document}
